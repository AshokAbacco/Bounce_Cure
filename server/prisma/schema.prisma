generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  contents            Content[]
  sessions            Session[]
  loginLogs           LoginLog[]
  verificationTokens  EmailVerificationToken[]
  otpCodes            OTPCode[]
  apiKeys             ApiKey[]
  notificationSetting NotificationSetting?
  passwordResetTokens PasswordResetToken[] // ðŸ‘ˆ add this

  twoFASecret  String?
  is2FAEnabled Boolean @default(false)

  profileImage       Bytes?
  inAppNotifications InAppNotification[]
}

model Content {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  animationUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    Int
  user         User     @relation(fields: [createdBy], references: [id])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  device    String
  ipAddress String
  createdAt DateTime @default(now())
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  device    String
  ipAddress String
  location  String?
  createdAt DateTime @default(now())
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model OTPCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}

model Verification {
  id        Int      @id @default(autoincrement())
  email     String
  status    String
  checkedAt DateTime @default(now())
}

model SupportMessage {
  id        Int      @id @default(autoincrement())
  name      String
  message   String
  createdAt DateTime @default(now())
  userId    Int?
  userEmail String?
}

model SupportTicket {
  id          Int           @id @default(autoincrement())
  userId      Int?
  userEmail   String?
  subject     String
  description String
  files       SupportFile[]
  createdAt   DateTime      @default(now())
}

model SupportFile {
  id        Int           @id @default(autoincrement())
  filename  String
  mimetype  String
  data      Bytes
  createdAt DateTime      @default(now())
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId  Int
}

model NotificationSetting {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  email     Boolean @default(true)
  sms       Boolean @default(false)
  frequency String  @default("daily")
}

model InAppNotification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model DeletedAccount {
  id        Int      @id @default(autoincrement())
  userEmail String
  reason    String?
  deletedAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
}


