generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                      @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String                   @unique
  password            String
  createdAt           DateTime                 @default(now())
  twoFASecret         String?
  is2FAEnabled        Boolean                  @default(false)
  profileImage        Bytes?
  updatedAt           DateTime                 @updatedAt
  apiKeys             ApiKey[]
  contents            Content[]
  verificationTokens  EmailVerificationToken[]
  inAppNotifications  InAppNotification[]
  loginLogs           LoginLog[]
  notificationSetting NotificationSetting?
  otpCodes            OTPCode[]
  passwordResetTokens PasswordResetToken[]     @relation("UserTokens")
  sessions            Session[]
  Contact             Contact[]
}

model Content {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  animationUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    Int
  user         User     @relation(fields: [createdBy], references: [id])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  device    String
  ipAddress String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  device    String
  ipAddress String
  location  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model OTPCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Verification {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  status         String
  score          Int
  syntax_valid   Boolean
  domain_valid   Boolean
  mailbox_exists Boolean?
  catch_all      Boolean?
  disposable     Boolean
  role_based     Boolean
  greylisted     Boolean
  provider       String?
  mxRecord       String?
  isFreeDomain   Boolean?
  error          String?
  createdAt      DateTime @default(now())

  @@index([email])
}

model SupportMessage {
  id        Int      @id @default(autoincrement())
  name      String
  message   String
  createdAt DateTime @default(now())
  userEmail String?
  userId    Int?
}

model SupportTicket {
  id          Int           @id @default(autoincrement())
  subject     String
  description String
  createdAt   DateTime      @default(now())
  userEmail   String?
  userId      Int?
  files       SupportFile[]
}

model SupportFile {
  id        Int           @id @default(autoincrement())
  filename  String
  mimetype  String
  data      Bytes
  createdAt DateTime      @default(now())
  ticketId  Int
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
}

model NotificationSetting {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  email     Boolean @default(true)
  sms       Boolean @default(false)
  frequency String  @default("daily")
  user      User    @relation(fields: [userId], references: [id])
}

model InAppNotification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model DeletedAccount {
  id        Int      @id @default(autoincrement())
  userEmail String
  reason    String?
  deletedAt DateTime @default(now())
}

model PasswordResetToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  createdAt DateTime @default(now())

  // FIXED: userId must be Int (to match User.id)
  userId Int
  user   User @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?
  phone     String?
  company   String?
  status    String?  @default("active")
  priority  String? // vip, subscriber, new, etc.
  last      String?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]

  @@map("Contact") // ðŸ‘ˆ explicitly map to "Contact" in DB
}

model Task {
  id       Int      @id @default(autoincrement())
  title    String
  due      DateTime
  status   String
  priority String
  notes    String?
}

model Deal {
  id        Int      @id @default(autoincrement())
  name      String
  client    String
  stage     String
  value     Float
  closing   DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Email {
  id        String   @id @default(cuid())
  from      String
  to        String
  subject   String
  body      String
  date      DateTime
  tags      String[] @default([])
  status    String // "sent", "opened", "bounced", "unread"
  source    String // "imap", "sendgrid"
  folder    String // "INBOX", "SENT", etc.
  createdAt DateTime @default(now())
}

model EmailAccount {
  id            String   @id @default(autoincrement())
  userId        String
  email         String
  imapHost      String
  imapPort      Int
  imapUser      String
  encryptedPass String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Reply {
  id         Int      @id @default(autoincrement())
  contactId  Int
  campaignId Int?
  fromEmail  String // who replied (client email)
  toEmail    String // your campaign fromEmail
  subject    String? // optional, store subject
  message    String
  createdAt  DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id])
}

model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  campaign  String
  source    String
  status    String
  score     Int
  last      String
  createdAt DateTime @default(now())
}

model List {
  id           String   @id
  name         String // List Name
  count        Int // Contacts Count
  email        String // Email
  phone        String // Phone Number
  createdAt    DateTime @default(now()) // Created Timestamp
  uploadedFile Bytes? // must be Bytes, not String

  @@map("lists") // optional: maps model to 'lists' table
}

model Order {
  id        Int     @id @default(autoincrement()) // âœ… INT PRIMARY KEY
  orderCode String  @unique
  name      String?
  phone     String?
  plan      String
  amount    String
  status    String
  date      String
  timestamp BigInt  @default(0)
  deleted   Boolean @default(false)
}

//
// ---------- NEW MODELS: verification batch history (30-day retention) ----------
//

model VerificationBatch {
  id               Int           @id @default(autoincrement())
  name             String? // optional: filename or "manual_paste"
  source           String // "bulk" | "manual" | "single"
  includeOnlyValid Boolean       @default(false)
  maxRich          Boolean       @default(false)
  total            Int
  validCount       Int
  invalidCount     Int
  riskyCount       Int
  createdAt        DateTime      @default(now())
  results          BatchResult[]

  @@index([createdAt])
}

model BatchResult {
  id             Int               @id @default(autoincrement())
  batch          VerificationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  batchId        Int
  email          String
  status         String
  score          Int
  syntax_valid   Boolean
  domain_valid   Boolean
  mailbox_exists Boolean?
  catch_all      Boolean?
  disposable     Boolean
  role_based     Boolean
  greylisted     Boolean
  mx             String? // comma-separated MX entries (or keep as text array if you prefer)
  error          String?
  createdAt      DateTime          @default(now())

  @@index([email])
}
