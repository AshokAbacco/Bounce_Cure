generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String   @unique
  password     String
  createdAt    DateTime @default(now())
  twoFASecret  String?
  is2FAEnabled Boolean  @default(false)
  profileImage Bytes?
  updatedAt    DateTime @updatedAt

  // Relations
  apiKeys             ApiKey[]
  contents            Content[]
  verificationTokens  EmailVerificationToken[]
  inAppNotifications  InAppNotification[]
  loginLogs           LoginLog[]
  notificationSetting NotificationSetting?
  otpCodes            OTPCode[]
  passwordResetTokens PasswordResetToken[]     @relation("UserTokens")
  sessions            Session[]
  Contact             Contact[]
  emailAccounts       EmailAccount[]
}

model Content {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  animationUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    Int
  user         User     @relation(fields: [createdBy], references: [id])
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  device    String
  ipAddress String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model LoginLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  device    String
  ipAddress String
  location  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model OTPCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model Verification {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  status         String
  score          Int
  syntax_valid   Boolean
  domain_valid   Boolean
  mailbox_exists Boolean?
  catch_all      Boolean?
  disposable     Boolean
  role_based     Boolean
  greylisted     Boolean
  provider       String?
  mxRecord       String?
  isFreeDomain   Boolean?
  error          String?
  createdAt      DateTime @default(now())

  @@index([email])
}

model SupportMessage {
  id        Int      @id @default(autoincrement())
  name      String
  message   String
  createdAt DateTime @default(now())
  userEmail String?
  userId    Int?
}

model SupportTicket {
  id          Int           @id @default(autoincrement())
  subject     String
  description String
  createdAt   DateTime      @default(now())
  userEmail   String?
  userId      Int?
  files       SupportFile[]
}

model SupportFile {
  id        Int           @id @default(autoincrement())
  filename  String
  mimetype  String
  data      Bytes
  createdAt DateTime      @default(now())
  ticketId  Int
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model NotificationSetting {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  email     Boolean @default(true)
  sms       Boolean @default(false)
  frequency String  @default("daily")
  user      User    @relation(fields: [userId], references: [id])
}

model InAppNotification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  name      String
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model DeletedAccount {
  id        Int      @id @default(autoincrement())
  userEmail String
  reason    String?
  deletedAt DateTime @default(now())
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation("UserTokens", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String?
  phone     String?
  company   String?
  status    String?  @default("active")
  priority  String? // vip, subscriber, new, etc.
  last      String?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]
}

model Task {
  id       Int      @id @default(autoincrement())
  title    String
  due      DateTime
  status   String
  priority String
  notes    String?
}

model Deal {
  id        Int      @id @default(autoincrement())
  name      String
  client    String
  stage     String
  value     Float
  closing   DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailAccount {
  id       Int     @id @default(autoincrement())
  userId   Int
  email    String  @unique
  provider String?

  imapHost String
  imapPort Int
  imapUser String

  smtpHost      String
  smtpPort      Int
  smtpUser      String
  encryptedPass String?

  oauthClientId     String?
  oauthClientSecret String?
  refreshToken      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [userId], references: [id])

  // Relation to Emails
  emails Email[]
}

model Email {
  id        Int @id @default(autoincrement())
  accountId Int

  messageId String  @unique
  threadId  String?
  inReplyTo String?

  from     String
  to       String
  subject  String
  body     String
  bodyHtml String?

  date   DateTime
  folder String   @default("INBOX")
  status String   @default("unread")
  source String   @default("imap")
  tags   String[] @default([])

  isReply Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to EmailAccount
  account EmailAccount @relation(fields: [accountId], references: [id])
}

model Reply {
  id        Int      @id @default(autoincrement())
  contactId Int
  fromEmail String // who replied (client email)
  toEmail   String // your campaign fromEmail
  subject   String?
  message   String
  createdAt DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id])
}

model Lead {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  campaign  String
  source    String
  status    String
  score     Int
  last      String
  createdAt DateTime @default(now())
}

model List {
  id           String   @id
  name         String
  count        Int
  email        String
  phone        String
  createdAt    DateTime @default(now())
  uploadedFile Bytes?
}

model Order {
  id        Int     @id @default(autoincrement())
  orderCode String  @unique
  name      String?
  phone     String?
  plan      String
  amount    String
  status    String
  date      String
  timestamp BigInt  @default(0) @db.BigInt
  deleted   Boolean @default(false)
}

model VerificationBatch {
  id               Int           @id @default(autoincrement())
  name             String?
  source           String
  includeOnlyValid Boolean       @default(false)
  maxRich          Boolean       @default(false)
  total            Int
  validCount       Int
  invalidCount     Int
  riskyCount       Int
  createdAt        DateTime      @default(now())
  results          BatchResult[]

  @@index([createdAt])
}

model BatchResult {
  id             Int      @id @default(autoincrement())
  batchId        Int
  email          String
  status         String
  score          Int
  syntax_valid   Boolean
  domain_valid   Boolean
  mailbox_exists Boolean?
  catch_all      Boolean?
  disposable     Boolean
  role_based     Boolean
  greylisted     Boolean
  mx             String?
  error          String?
  createdAt      DateTime @default(now())

  batch VerificationBatch @relation(fields: [batchId], references: [id], onDelete: Cascade)

  @@index([email])
}

model Conversation {
  id        Int       @id @default(autoincrement())
  subject   String?
  snippet   String? // ðŸ‘ˆ add this
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             Int           @id @default(autoincrement())
  conversationId Int?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  body           String
  from           String
  to             String
  fromName       String?
  fromEmail      String?
  direction      String
  sentAt         DateTime      @default(now())
}

model Campaign {
  id              Int      @id @default(autoincrement())
  name            String
  subject         String
  fromName        String
  fromEmail       String
  sentCount       Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  conversionCount Int      @default(0)
  designJson      String? // store canvas JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  events CampaignEvent[]
}

model CampaignEvent {
  id         Int      @id @default(autoincrement())
  campaignId Int
  type       String // "sent" | "open" | "click" | "conversion"
  email      String?
  createdAt  DateTime @default(now())

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model MmsCampaign {
  id         Int            @id @default(autoincrement())
  name       String
  message    String
  mediaUrl   String
  createdAt  DateTime       @default(now())
  recipients MmsRecipient[]
}

model MmsRecipient {
  id            Int         @id @default(autoincrement())
  phone         String
  mmsCampaignId Int
  mmsCampaign   MmsCampaign @relation(fields: [mmsCampaignId], references: [id])
}

model Payment {
  id                Int      @id @default(autoincrement())
  email             String
  transaction_id    String
  plan_name         String
  payment_date      DateTime
  next_payment_date DateTime
  amount            Float
  notified          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
